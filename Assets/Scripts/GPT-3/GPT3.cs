using OpenAI_API;
using System.IO;
using System.Threading.Tasks;
using UnityEngine;

public class GPT3 : MonoBehaviour
{
    private string apiPath = "Assets/Resources/Keys/openai.txt";

    OpenAIAPI api;

    private void Awake()
    {
        StreamReader reader = new StreamReader(apiPath);
        api = new OpenAIAPI(reader.ReadToEnd(), Engine.Davinci_2);
    }

    private async void Start()
    {
        Task<string> task1 = GenerateVariation("I want him to stop saying those things.", "8 year old girl");
        string message1 = await task1;
        Debug.Log("message 1: " + message1);

        Task<string> task2 = GenerateVariation("I want him to stop saying those things.", "8 year old girl", "depressed");
        string message2 = await task2;
        Debug.Log("message 2: " + message2);

    }

    /// <summary>
    /// Pass a given piece of text to a GPT model and have it generate a different but similar in meaning text
    /// </summary>
    /// <param name="message">The original text</param>
    /// <returns>The variation text generated by the GPT model</returns>
    public async Task<string> GenerateVariation(string message)
    {
        //Call on the API to generate a variation of the given text
        try
        {
            var result = await api.Completions.CreateCompletionAsync(
                prompt: "Based on the following text, write a variation that retains its meaning but is distinct in the way it is written: " + message,
                max_tokens: 150,
                temperature: 1
                );

            return result.ToString();
        }
        catch (System.Exception e)
        {
            Debug.LogError(e.Message);
        }
        return "If you are hearing this, then there has been an error when using the generate variation function for GPT-3.";
    }


    /// <summary>
    /// Pass a given piece of text to a GPT model and have it generate a different but similar in meaning text
    /// </summary>
    /// <param name="message">The original text</param>
    /// <param name="persona">Information about the character that is speaking, such as age, background.</param>
    /// <returns>The variation text generated by the GPT model</returns>
    public async Task<string> GenerateVariation(string message, string persona)
    {
        //Call on the API to generate a variation of the given text
        try
        {
            var result = await api.Completions.CreateCompletionAsync(
                prompt: "Based on the following text, write a variation that retains its meaning but is distinct in the way it is written and in the style of a" + persona + ": " + message,
                max_tokens: 150,
                temperature: 1
                );

            return result.ToString();
        }
        catch (System.Exception e)
        {
            Debug.LogError(e.Message);
        }
        return "If you are hearing this, then there has been an error when using the generate variation function for GPT-3.";
    }

    /// <summary>
    /// Pass a given piece of text to a GPT model and have it generate a different but similar in meaning text.
    /// </summary>
    /// <param name="message">The original text</param>
    /// <param name="persona">Information about the character that is speaking, such as age, background.</param>
    /// <param name="currentEmotion">Information about the character's current emotional state</param>
    /// <returns>The variation text generated by the GPT model</returns>
    public async Task<string> GenerateVariation(string message, string persona, string currentEmotion)
    {
        //Call on the API to generate a variation of the given text
        try
        {
            var result = await api.Completions.CreateCompletionAsync(
                prompt: "Based on the following text, write a variation that retains its meaning but is distinct in the way it is written and in the style of an" + currentEmotion + persona + ": " + message,
                max_tokens: 150,
                temperature: 1
                );

            return result.ToString();
        }
        catch (System.Exception e)
        {
            Debug.LogError(e.Message);
        }
        return "If you are hearing this, then there has been an error when using the generate variation function for GPT-3.";
    }
}